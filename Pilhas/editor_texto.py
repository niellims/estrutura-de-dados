def escrever(texto: str, conteudo: str, historico: list[str]) -> str:
    historico.append(texto)  # Salva o estado atual antes da mudan√ßa
    return texto + conteudo

def apagar(texto: str, quantidade: int, historico: list[str]) -> str:
    historico.append(texto)  # Salva o estado atual antes da mudan√ßa
    return texto[:-quantidade] if quantidade <= len(texto) else ""

def desfazer(historico: list[str]) -> str:
    if len(historico) > 0:
        return historico.pop()  # Restaura o √∫ltimo estado salvo
    return ""  # Se n√£o h√° nada para desfazer, retorna texto vazio


def editor_de_texto() -> None:
    texto = ""
    historico = []

    # Simula a√ß√µes
    texto = escrever(texto, "Ol√°", historico)
    print("Texto:", texto)

    texto = escrever(texto, " mundo", historico)
    print("Texto:", texto)

    texto = apagar(texto, 3, historico)  # Apaga "ndo"
    print("Texto ap√≥s apagar:", texto)

    texto = desfazer(historico)  # Desfaz o apagar
    print("Texto ap√≥s desfazer:", texto)

    texto = desfazer(historico)  # Desfaz a escrita " mundo"
    print("Texto ap√≥s desfazer:", texto)

    texto = desfazer(historico)  # Desfaz a escrita "Ol√°"
    print("Texto ap√≥s desfazer:", texto)

# Executa o editor
editor_de_texto()



# üß† L√≥gica:
# Cada vez que voc√™ escreve ou apaga, o estado anterior do texto √© salvo na pilha de hist√≥rico.

# A fun√ß√£o desfazer() simula o Ctrl+Z, restaurando o √∫ltimo estado da pilha (√∫ltima a√ß√£o feita).

# Se quiser posso fazer uma vers√£o com m√∫ltiplos tipos de a√ß√µes e refatorar como uma interface mais completa. Deseja isso?